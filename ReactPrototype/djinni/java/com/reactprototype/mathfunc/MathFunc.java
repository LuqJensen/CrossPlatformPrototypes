// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mathfunc.djinni

package com.reactprototype.mathfunc;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MathFunc {
    public abstract double add(double a, double b);

    public abstract double subtract(double a, double b);

    public abstract double multiply(double a, double b);

    public abstract double divide(double a, double b);

    public static MathFunc create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends MathFunc
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public double add(double a, double b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef, a, b);
        }
        private native double native_add(long _nativeRef, double a, double b);

        @Override
        public double subtract(double a, double b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_subtract(this.nativeRef, a, b);
        }
        private native double native_subtract(long _nativeRef, double a, double b);

        @Override
        public double multiply(double a, double b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_multiply(this.nativeRef, a, b);
        }
        private native double native_multiply(long _nativeRef, double a, double b);

        @Override
        public double divide(double a, double b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_divide(this.nativeRef, a, b);
        }
        private native double native_divide(long _nativeRef, double a, double b);

        public static native MathFunc create();
    }
}
