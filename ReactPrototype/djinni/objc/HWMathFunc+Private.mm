// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mathfunc.djinni

#import "HWMathFunc+Private.h"
#import "HWMathFunc.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface HWMathFunc ()

- (id)initWithCpp:(const std::shared_ptr<::mathfunc::MathFunc>&)cppRef;

@end

@implementation HWMathFunc {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::mathfunc::MathFunc>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::mathfunc::MathFunc>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable HWMathFunc *)create {
    try {
        auto objcpp_result_ = ::mathfunc::MathFunc::create();
        return ::djinni_generated::MathFunc::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)add:(double)a
            b:(double)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni::F64::toCpp(a),
                                                       ::djinni::F64::toCpp(b));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)subtract:(double)a
                 b:(double)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->subtract(::djinni::F64::toCpp(a),
                                                            ::djinni::F64::toCpp(b));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)multiply:(double)a
                 b:(double)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->multiply(::djinni::F64::toCpp(a),
                                                            ::djinni::F64::toCpp(b));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)divide:(double)a
               b:(double)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->divide(::djinni::F64::toCpp(a),
                                                          ::djinni::F64::toCpp(b));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto MathFunc::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MathFunc::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<HWMathFunc>(cpp);
}

}  // namespace djinni_generated

@end
