// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mathfunc.djinni

#include "NativeMathFunc.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeMathFunc::NativeMathFunc() : ::djinni::JniInterface<::mathfunc::MathFunc, NativeMathFunc>("com/reactprototype/mathfunc/MathFunc$CppProxy") {}

NativeMathFunc::~NativeMathFunc() = default;


CJNIEXPORT void JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::mathfunc::MathFunc>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::mathfunc::MathFunc::create();
        return ::djinni::release(::djinni_generated::NativeMathFunc::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_native_1add(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_a, jdouble j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::mathfunc::MathFunc>(nativeRef);
        auto r = ref->add(::djinni::F64::toCpp(jniEnv, j_a),
                          ::djinni::F64::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_native_1subtract(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_a, jdouble j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::mathfunc::MathFunc>(nativeRef);
        auto r = ref->subtract(::djinni::F64::toCpp(jniEnv, j_a),
                               ::djinni::F64::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_native_1multiply(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_a, jdouble j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::mathfunc::MathFunc>(nativeRef);
        auto r = ref->multiply(::djinni::F64::toCpp(jniEnv, j_a),
                               ::djinni::F64::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_reactprototype_mathfunc_MathFunc_00024CppProxy_native_1divide(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_a, jdouble j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::mathfunc::MathFunc>(nativeRef);
        auto r = ref->divide(::djinni::F64::toCpp(jniEnv, j_a),
                             ::djinni::F64::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
